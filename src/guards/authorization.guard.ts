import { Injectable, CanActivate, ExecutionContext } from '@nestjs/common'
import { Reflector } from '@nestjs/core';
import { Observable } from 'rxjs'
import { Role } from '../user/entities/role.enum';

@Injectable()
export class AuthorizationGuard implements CanActivate {
    constructor(private reflector: Reflector) { }

    canActivate(context: ExecutionContext): boolean | Promise<boolean> | Observable<boolean> {
        const requiredRoles = this.reflector.getAllAndOverride<Role[]>('roles', [
            context.getHandler(),
            context.getClass(),
        ]);
        // console.log("üöÄ Role c·∫ßn ƒë·ªÉ m·ªü API", requiredRoles)


        // N·∫øu API n√†o  ko s·ª≠ d·ª•ng roles th√¨ c·ª© ƒë·ªÉ n√≥ ƒëi qua
        if (!requiredRoles) {
            return true;
        }


        const request = context.switchToHttp().getRequest();
        const userRole = request.user.data
        // .includes(): ki·ªÉm tra xem m·ªôt gi√° tr·ªã c·ª• th·ªÉ c√≥ t·ªìn t·∫°i trong m·∫£ng hay kh√¥ng. N·∫øu t·ªìn t·∫°i, n√≥ tr·∫£ v·ªÅ true, ng∆∞·ª£c l·∫°i, n√≥ tr·∫£ v·ªÅ false.
        return requiredRoles.includes(userRole.vai_tro_id);
    }
}